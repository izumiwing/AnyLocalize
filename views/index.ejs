<!doctype html>
<html>
<head>
<meta charset="utf-8">
<title>AnyLocalize Dashboard</title>
<link href="stylesheets/style.css" rel="stylesheet" type="text/css">
<script src="javascripts/axios.js"></script>
<script src="javascripts/vue.global.js"></script>
<script src="javascripts/vue-router.global.js"></script>
</head>

<body>
	<div id="app">
		<div class="leftMenu">
			<div id="leftMenuUser" class="leftMenuUser">
				<div id="leftMenuUserLogin">
					<input type="text" id="username" placeholder="user" class="loginInput" />
					<input type="password" id="password" placeholder="password" class="loginInput" />
					<div class="loginButton" @click="loginAuth()">登录</div>
				</div>
				<div id="userInfo" class="userInfo"></div>
			</div>
			<div class="leftMenuCreate"><router-link to="/create" @click="createProject()" class="leftMenuCreateLink">+Create project</router-link></div>
			<br>
			<%- leftMenuContent %>
		</div>
		<div class="appView">
			<div :style="{display:dispApp}" class="translateUserCon">
				<div class="translateTitle">
					{{translateTitle}}
				</div>
				<br>
				<div class="translateKeyBox">
					<a id="translateSource" class="translateKeySource" @dblclick="translate('auto','zh-CN')">{{translateSource}}</a>
				</div>
				<br>
				<div class="translateValueBox">
					<input v-model="translationLocalized" name="translateLocalized" class="translateValueInput" type="text" placeholder="Translation goes here"/>
				</div>
				<br>
				<div class="translateControlArea">
					<a class="translateControlButton" @click="openFile(currentFile,true)">Skip</a>
					<a class="translateControlButton" @click="translateNext(currentFile,trObj,translationLocalized)">OK</a>
					<a class="translateControlButton" :style="{display: downloadButtonAvalible}" @click="downloadFile(currentFile)">Download</a>
				</div>
			</div>
			<router-view></router-view>
		</div>
	</div>
	<script type="module">
		import VueTemplate from'./javascripts/index.js';
		
		const componentUserControl = {
			template:VueTemplate.userControl,
		}
		
		const router = new VueRouter.createRouter({
			history:VueRouter.createWebHashHistory(),
			routes:[
				{path:'/',component:{template:'<div></div>'}},
				{path:'/create',component:{template:VueTemplate.createProject}}
			]
		})
		
		var app = Vue.createApp({
			data(){
					return{
						translateTitle:'Translate',
						translateSource:'Text will appear at here.',
						trObj:{},
						currentFile:'',
						translationLocalized:'',
						downloadButtonAvalible:'none',
						dispApp:'none',
						token:''
					}
				},
			methods:{
				openFile(fname,isForce){
					vm.dispApp = 'block';
					if(vm.currentFile == fname && !isForce || vm.currentFile == '' && isForce || vm.trObj.line == -1 && isForce){
					 	return;  
					}
					vm.downloadButtonAvalible = 'none'
					axios.post('/translate',{reqFile:fname,reqType:0,token:vm.token})
					.then(function(res){
						vm.trObj = res.data;
						if(vm.trObj.line == -1){
							vm.downloadButtonAvalible = 'inline-block'
						}
						if(res.data.status == "retry"){
							vm.openFile(fname,isForce);
						}
						vm.translateSource = vm.trObj.translateSource;
						vm.currentFile = fname;
					})
				},
				translateNext(fname,tNtrObj,localized){
					if(localized == '' || vm.currentFile == ''){
					   return;
					}
					vm.downloadButtonAvalible = 'none'
					axios.post('/translate',{reqFile:fname,reqType:1,reqPhrase:localized,reqLine:tNtrObj.line,token:vm.token})
					.then(function(res){
						vm.trObj = res.data;
						if(vm.trObj.line == -1){
							vm.downloadButtonAvalible = 'inline-block'
							return;
						}
						vm.translateSource = vm.trObj.translateSource;
						vm.currentFile = fname;
						vm.translationLocalized = '';
					})
				},
				downloadFile(fname){
					axios.post('/translate',{reqFile:fname,reqType:2,token:vm.token},{responseType:'blob'})
					.then(function(res){
						var blob = res.data;
						var reader = new FileReader();
						reader.readAsDataURL(blob);
						reader.onload = function(e){
							var a = document.createElement('a');
							var fileName = res.headers['content-disposition'].split("=");
							fileName = fileName[fileName.length - 1];
							fileName = fileName.replace(/"/g,"");
							a.download = fileName;
							a.href = e.target.result;
							document.body.appendChild(a);
							a.click();
							document.body.removeChild(a);
						}
					})
				},
				translate(source, target){
					var text = window.getSelection();
					var url = 'https://translate.googleapis.com/translate_a/single?client=gtx&sl=' + source + '&tl=' + target + '&dt=t&q=' + text;
					axios.get(url)
					.then(function(res){
						var raw = res.data[0][0][0];
						var result = raw;
						console.log(raw);
					})
				},
				loginAuth(){
					var loginUser = document.getElementById("username").value;
					var loginPass = document.getElementById("password").value;
					axios.post('/users',{user:loginUser,passwd:loginPass})
					.then(function(res){
						if(res.data.token != undefined){
							leftMenuUserLogin.style.display = "none";
							userInfo.innerHTML = "Token：<br>" + res.data.token
							vm.token = res.data.token;
						}else{
							document.getElementById("password").value = "";
							document.getElementById("password").placeholder = "账号/密码错误";
							
						}

					})
				},
				createProject(){
					axios.post('/createProject/Upload',{})
					.then(function(res){
						
					})
					vm.dispApp = 'none';
				}
			}
		})
		
		app.use(router)
		var vm = app.mount('#app')
	</script>
</body>
</html>
